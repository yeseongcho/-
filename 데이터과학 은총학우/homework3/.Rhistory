lines(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
lines(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, accuracy,type="l", xlim=c(10,200),col="red",lwd=2)
lines(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
recall
plot(k_value, accuracy,type="l", xlim=c(10,200),col="red",lwd=2)
lines(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
lines(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, accuracy,type="l", xlim=c(10,200),col="red",lwd=2)
lines(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
lines(k_value, precision,type="l", xlim=c(10,200),col="blue",lwd=2)
plot(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
lines(k_value, precision,type="l", xlim=c(10,200),col="blue",lwd=2)
precision
recall
precision
plot(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
knn_accuracy <- function(k_value){
test.knn_pred_P <- knn(train = train.knn_new , test = test.knn_new , cl = train.knn_label, k = 147, prob = TRUE)
test_pred_prob <- ifelse(test.knn_pred_P == 'rich', attributes(test.knn_pred_P)$prob,1-attributes(test.knn_pred_P)$prob)
test_pred_new <- ifelse(test_pred_prob > 0.3, 'rich', 'poor')
a <- mean(test.knn_label == test_pred_new)
return(a)
}
accuracy2 <- sapply(k_value, knn_accuracy)
k_value <- c(10, 30, 50, 70, 90, 110, 130, 147, 170, 200)
knn_accuracy <- function(k_value){
test.knn_pred_P <- knn(train = train.knn_new , test = test.knn_new , cl = train.knn_label, k = k_value, prob = TRUE)
test_pred_prob <- ifelse(test.knn_pred_P == 'rich', attributes(test.knn_pred_P)$prob,1-attributes(test.knn_pred_P)$prob)
test_pred_new <- ifelse(test_pred_prob > 0.3, 'rich', 'poor')
a <- mean(test.knn_label == test_pred_new)
return(a)
}
accuracy2 <- sapply(k_value, knn_accuracy)
accuracy2
# precision
knn_precision <- function(k_value){
test.knn_pred_P <- knn(train = train.knn_new , test = test.knn_new , cl = train.knn_label, k = k_value, prob = TRUE)
test_pred_prob <- ifelse(test.knn_pred_P == 'rich', attributes(test.knn_pred_P)$prob,1-attributes(test.knn_pred_P)$prob)
test_pred_new <- ifelse(test_pred_prob > 0.3, 'rich', 'poor')
cmat <- table(test.knn_label, test_pred_new)
a <- cmat[2,2] / sum(cmat[,2])
return(a)
}
# recall
knn_recall <- function(k_value){
test.knn_pred_P <- knn(train = train.knn_new , test = test.knn_new , cl = train.knn_label, k = k_value, prob = TRUE)
test_pred_prob <- ifelse(test.knn_pred_P == 'rich', attributes(test.knn_pred_P)$prob,1-attributes(test.knn_pred_P)$prob)
test_pred_new <- ifelse(test_pred_prob > 0.3, 'rich', 'poor')
cmat <- table(test.knn_label, test_pred_new)
a <- cmat[2,2] / sum(cmat[2,])
return(a)
}
precision2 <- sapply(k_value, knn_precision)
ROC(test_pred_new, test.knn_label == 'rich') # 0.883
calAUC <- function(predCol, targetCol){
perf <- performance(prediction(predCol, targetCol), 'auc')
as.numeric(perf@y.values)
}
knn_AUC <- function(k_value){
test.knn_pred_P <- knn(train = train.knn_new , test = test.knn_new , cl = train.knn_label, k = k_value, prob = TRUE)
test_pred_prob <- ifelse(test.knn_pred_P == 'rich', attributes(test.knn_pred_P)$prob,1-attributes(test.knn_pred_P)$prob)
a <- calAUC(test_pred_prob,test.knn_label== 'rich')
}
AUC <- sapply(k_value, knn_AUC)
AUC
recall2
precision2
recall2
# recall
knn_recall <- function(k_value){
test.knn_pred_P <- knn(train = train.knn_new , test = test.knn_new , cl = train.knn_label, k = k_value, prob = TRUE)
test_pred_prob <- ifelse(test.knn_pred_P == 'rich', attributes(test.knn_pred_P)$prob,1-attributes(test.knn_pred_P)$prob)
test_pred_new <- ifelse(test_pred_prob > 0.3, 'rich', 'poor')
cmat <- table(test.knn_label, test_pred_new)
a <- cmat[2,2] / sum(cmat[2,])
return(a)
}
recall2 <-    sapply(k_value, knn_recall)
recall2
plot(k_value, accuracy,type="l", xlim=c(10,200),col="red",lwd=2)
par(new=TRUE)
plot(k_value, accuracy,type="l", xlim=c(10,200),col="red",lwd=2)
par(new=TRUE)
plot(k_value, precision,type="l", xlim=c(10,200),col="blue",lwd=2)
plot(k_value, accuracy,type="l", xlim=c(10,200),col="red",lwd=2)
par(new=TRUE)
plot(k_value, precision,type="l", xlim=c(10,200),col="blue",lwd=2)
plot(k_value, accuracy,type="l", xlim=c(10,200),col="red",lwd=2)
par(new=TRUE)
plot(k_value, precision,type="l", xlim=c(10,200),col="blue",lwd=2)
lines(k_value, recall ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, accuracy2,type="l", xlim=c(10,200),col="red",lwd=2)
par(new=TRUE)
plot(k_value, precision2,type="l", xlim=c(10,200),col="blue",lwd=2)
lines(k_value, recall2 ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, accuracy2,type="l", xlim=c(10,200),col="red",lwd=2)
par(new=TRUE)
plot(k_value, precision2,type="l", xlim=c(10,200),col="blue",lwd=2)
lines(k_value, recall2 ,type="l", xlim=c(10,200),col="orange",lwd=2)
recall2
precision2
accuracy2
plot(k_value, accuracy2,type="l", xlim=c(10,200),col="red",lwd=2)
par(new=TRUE)
plot(k_value, precision2,type="l", xlim=c(10,200),col="blue",lwd=2)
lines(k_value, recall2 ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, accuracy2,type="l", xlim=c(10,200),col="red",lwd=2, yilm=c(0.5, 0.85))
plot(k_value, accuracy2,type="l", xlim=c(10,200),col="red",lwd=2, yilm=c(0.5, 0.85))
accuracy2
plot(k_value, accuracy2, type="l", xlim=c(10,200), col="red", lwd=2, yilm=c(0.5, 0.85))
accuracy2
accuracy2
precision2
recall2
AUC
plot(k_value, accuracy2, type="l", xlim=c(10,200), col="red", lwd=2, yilm=c(0.5, 0.85))
plot(k_value, accuracy2, type="l", xlim=c(10,200), col="red", lwd=2)
plot(k_value, precision2 ,type="l", xlim=c(10,200), ylim = c(0.5, 0.9),col="blue",lwd=2)
lines(k_value, recall2 ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, precision2 ,type="l", xlim=c(10,200), ylim = c(0.5, 0.9),col="blue",lwd=2)
lines(k_value, recall2 ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, precision2 ,type="l", xlim=c(10,200),col="blue",lwd=2)
plot(k_value, recall2 ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, accuracy2, type="l", xlim=c(10,200), col="red", lwd=2)
plot(k_value, precision2 ,type="l", xlim=c(10,200),col="blue",lwd=2)
plot(k_value, recall2 ,type="l", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, AUC ,type="l", xlim=c(10,200),col="pink",lwd=2)
plot(k_value, AUC ,type="l", xlim=c(10,200),col="pink",lwd=2)
plot(k_value, AUC ,type="l", xlim=c(10,200), col="green",lwd=2)
plot(k_value, accuracy2, type="5", xlim=c(10,200), col="red", lwd=2)
plot(k_value, accuracy2, type=5, xlim=c(10,200), col="red", lwd=2)
plot(k_value, AUC ,type="l", xlim=c(10,200), col="puple",lwd=2)
plot(k_value, AUC ,type="l", xlim=c(10,200), col="dark green",lwd=2)
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2)
plot(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2)
plot(k_value, recall2 ,type="o", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, AUC ,type="o", xlim=c(10,200), col="dark green",lwd=2)
?plot
par(mfrow=c(2,2))
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2)
plot(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2)
plot(k_value, recall2 ,type="o", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, AUC ,type="o", xlim=c(10,200), col="dark green",lwd=2)
par(mfrow=c(2,2))
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2)
plot(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2)
plot(k_value, recall2 ,type="o", xlim=c(10,200),col="orange",lwd=2)
plot(k_value, AUC ,type="o", xlim=c(10,200), col="dark green",lwd=2)
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2, main = "accuracy")
par(mfrow=c(2,2))
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2, main = "accuracy")
plot(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2, main = "precision")
plot(k_value, recall2 ,type="o", xlim=c(10,200),col="orange",lwd=2, main = "recall")
plot(k_value, AUC ,type="o", xlim=c(10,200), col="dark green",lwd=2, main = "AUC")
accuracy2
precision2
recall2
plot(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2, main = "precision")
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2, main = "accuracy")
plot(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2, main = "precision")
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2, main = "accuracy")
lines(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2, main = "precision")
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2, main = "accuracy",ylim=c(0.5, 0.83))
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2, main = "accuracy",ylim=c(0.5, 0.83))
lines(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2, main = "precision")
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2, main = "accuracy")
plot(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2, main = "precision")
plot(k_value, recall2 ,type="o", xlim=c(10,200),col="orange",lwd=2, main = "recall")
plot(k_value, AUC ,type="o", xlim=c(10,200), col="dark green",lwd=2, main = "AUC")
plot(k_value, AUC ,type="o", xlim=c(10,200), col="dark green",lwd=2, main = "AUC")
train.knn_pred <-  knn(train = train.knn_new , test = test.knn_new , cl = train.knn_label, k = 30)
#accuracy
mean(test.knn_label == train.knn_pred) # 0.827
test.knn_pred_P <- knn(train = train.knn_new , test = test.knn_new , cl = train.knn_label, k = 30, prob = TRUE)
test_pred_prob <- ifelse(test.knn_pred_P == 'rich',
attributes(test.knn_pred_P)$prob,
1-attributes(test.knn_pred_P)$prob)
library(Epi)
ROC(test_pred_prob, test.knn_label== 'rich') # 0.883
names(train)
ROC(new.test.df2$pred, new.test.df2$income)
new.test.df2 <- test.df2[-3]
new.test.df2$pred <- predict(train_model9 , new.test.df2, type = "class")
mean(new.test.df2$income == new.test.df2$pred) # accuracy : 83.2 / 83.7 / 84.0 / 83.3
get_precision(new.test.df2$pred, new.test.df2$income) # precision : 66.2 / 66.5 / 67.1 /65.6
get_recall(new.test.df2$pred, new.test.df2$income)    # recall : 66.5% / 69.7 / 69.4 / 70.2
ROC(new.test.df2$pred, new.test.df2$income)
#accuracy
mean(test.knn_label == test_pred_new) # 0.801
#accuracy
mean(test.knn_label == test_pred_new) # 0.801
#precision
cmat[2,2] / sum(cmat[,2]) # 0.571
##### set lower threshold #####
threshold <- 0.3
test_pred_new <- ifelse(test_pred_prob > threshold, 'rich', 'poor')
#accuracy
mean(test.knn_label == test_pred_new) # 0.801
test.knn_pred_P <- knn(train = train.knn_new , test = test.knn_new , cl = train.knn_label, k = 30, prob = TRUE)
#음성이라면 그대로 확률을 쓸 것이고, 양성이라면 1-prob을 할 것이다
# converting all Prob to P(rich)
test_pred_prob <- ifelse(test.knn_pred_P == 'rich',
attributes(test.knn_pred_P)$prob,
1-attributes(test.knn_pred_P)$prob)
# AUC for our kNN
library(ROCR)
library(Epi)
ROC(test_pred_prob, test.knn_label== 'rich') # 0.885
#accuracy
mean(test.knn_label == test_pred_new) # 0.801
#precision
cmat[2,2] / sum(cmat[,2]) # 0.571
#recall
cmat[2,2] / sum(cmat[2,]) # 0.8
##### set lower threshold #####
threshold <- 0.3
test_pred_new <- ifelse(test_pred_prob > threshold, 'rich', 'poor')
ROC(new.test$pred, new.test$income)
par(mfrow=c(2,2))
plot(k_value, accuracy2, type="o", xlim=c(10,200), col="red", lwd=2, main = "accuracy")
plot(k_value, precision2 ,type="o", xlim=c(10,200),col="blue",lwd=2, main = "precision")
plot(k_value, recall2 ,type="o", xlim=c(10,200),col="orange",lwd=2, main = "recall")
plot(k_value, AUC ,type="o", xlim=c(10,200), col="dark green",lwd=2, main = "AUC")
new.train <- train
train_model.train.full <- rpart(income~ . , data = new.train, method = "class",
control = rpart.control(cp = 0))
# train set
new.train$pred <- predict(train_model.train.full, new.train, type = "class")
############
library(rpart)
############
library(rpart)
library(rpart.plot)
new.train <- train
train_model.train.full <- rpart(income~ . , data = new.train, method = "class",
control = rpart.control(cp = 0))
plotcp(train_model.train.full) #0.0014 = cp
##Prune the tree
train_model_pruned <- prune(train_model.train.full, cp = 0.0014)
train_model_pruned
#table
table(new.train$income , new.train$pred)
#table
table(new.train$income , new.train$pred)
# train set
new.train$pred <- predict(train_model.train.full, new.train, type = "class")
#table
table(new.train$income , new.train$pred)
mean(new.train$income == new.train$pred) # 87.95
get_precision(new.train$pred, new.train$income) # precision : 80.41%
get_recall(new.train$pred, new.train$income)    # recall : 68.27%
rpart.plot(train_model_pruned)
load("C:/Users/21500/Desktop/homework/homework4/income_hw4.RData")
str(train)
############
library(rpart)
library(rpart.plot)
new.train <- train
train_model.train.full <- rpart(income~ . , data = new.train, method = "class",
control = rpart.control(cp = 0))
plotcp(train_model.train.full) #0.0014 = cp
##Prune the tree
train_model_pruned <- prune(train_model.train.full, cp = 0.0014)
train_model_pruned
# train set
new.train$pred <- predict(train_model.train.full, new.train, type = "class")
#table
table(new.train$income , new.train$pred)
mean(new.train$income == new.train$pred) # 0.888
get_precision(new.train$pred, new.train$income) # precision : 0.814
get_recall(new.train$pred, new.train$income)    # recall : 0.713
rpart.plot(train_model_pruned)
new.train2 <- train
train_model.full <- rpart(income~ . , data = new.train2, method = "class",
control = rpart.control(cp = 0))
plotcp(train_model.full) #0.0091 = cp
##Prune the tree
train_model_pruned2 <- prune(train_model.full, cp = 0.0072)
train_model_pruned2
# train set
new.train2$pred <- predict(train_model_pruned2, new.train2, type = "class")
mean(new.train2$income == new.train2$pred) # accuracy : 84.48
get_precision(new.train2$pred, new.train2$income) # precision : 74.85%
get_recall(new.train2$pred, new.train2$income)    # recall : 56.84%
new.test <- test
new.test$pred <- predict(train_model_pruned2, new.test, type = "class")
mean(new.test$income == new.test$pred) # accuracy : 84.48
get_precision(new.test$pred, new.test$income) # precision : 74.85%
get_recall(new.test$pred, new.test$income)    # recall : 56.84%
mean(new.test$income == new.test$pred) # accuracy : 0.847
get_precision(new.test$pred, new.test$income) # precision : 0.718
get_recall(new.test$pred, new.test$income)    # recall : 0.636
train_model3 <- rpart(income~ . , data = new.train3, method = "class", control= rpart.control(cp = 0, minsplit = 300))
#table
table(new.train3$income , new.train3$pred)
# train set
new.train3$pred <- predict(train_model3, new.train3, type = "class")
mean(new.train3$income == new.train3$pred) # accuracy : 85.1
get_precision(new.train3$pred, new.train3$income) # precision : 75.6%
get_recall(new.train3$pred, new.train3$income)    # recall : 59.4%
new.train3 <- train
train_model3 <- rpart(income~ . , data = new.train3, method = "class", control= rpart.control(cp = 0, minsplit = 300))
#table
table(new.train3$income , new.train3$pred)
# train set
new.train3$pred <- predict(train_model3, new.train3, type = "class")
#table
table(new.train3$income , new.train3$pred)
mean(new.train3$income == new.train3$pred) # accuracy : 85.1
get_precision(new.train3$pred, new.train3$income) # precision : 75.6%
get_recall(new.train3$pred, new.train3$income)    # recall : 59.4%
new.train4 <- train
train_model4 <- rpart(income~ . , data = new.train4, method = "class", control= rpart.control(cp = 0, minsplit = 250))
#table
table(new.train4$income , new.train4$pred)
#table
table(new.train4$income , new.train4$pred)
# train set
new.train4$pred <- predict(train_model4, new.train4, type = "class")
#table
table(new.train4$income , new.train4$pred)
mean(new.train4$income == new.train4$pred) # accuracy : 85.1
get_precision(new.train4$pred, new.train4$income) # precision : 76.8%
get_recall(new.train4$pred, new.train4$income)    # recall : 57.9%
new.train5 <- train
train_model5 <- rpart(income~ . , data = new.train5, method = "class", control= rpart.control(cp = 0, minsplit = 200))
# train set
new.train5$pred <- predict(train_model5, new.train5, type = "class")
#table
table(new.train5$income , new.train5$pred)
mean(new.train5$income == new.train5$pred) # accuracy : 85.3
get_precision(new.train5$pred, new.train5$income) # precision : 77.0%
get_recall(new.train5$pred, new.train5$income)    # recall : 58.7%
new.train6 <- train
train_model6 <- rpart(income~ . , data = new.train6, method = "class", control= rpart.control(cp = 0, minsplit = 100))
# train set
new.train6$pred <- predict(train_model6, new.train6, type = "class")
#table
table(new.train6$income , new.train6$pred)
mean(new.train6$income == new.train6$pred) # accuracy : 86.0
get_precision(new.train6$pred, new.train6$income) # precision : 78.1%
get_recall(new.train6$pred, new.train6$income)    # recall : 60.8%
new.train7 <- train
train_model7 <- rpart(income~ . , data = new.train7, method = "class", control= rpart.control(cp = 0, minsplit = 50))
# train set
new.train7$pred <- predict(train_model7, new.train7, type = "class")
#table
table(new.train7$income , new.train7$pred)
mean(new.train7$income == new.train7$pred)        # accuracy : 86.6
get_precision(new.train7$pred, new.train7$income) # precision : 77.4%
get_recall(new.train7$pred, new.train7$income)    # recall : 65.7%
new.train7 <- train
train_model7 <- rpart(income~ . , data = new.train7, method = "class", control= rpart.control(cp = 0, minsplit = 30))
# train set
new.train7$pred <- predict(train_model7, new.train7, type = "class")
#table
table(new.train7$income , new.train7$pred)
mean(new.train7$income == new.train7$pred) # accuracy : 87.2
get_precision(new.train7$pred, new.train7$income) # precision : 78.8%
get_recall(new.train7$pred, new.train7$income)    # recall : 66.9%
new.train8 <- train
new.train8 <- train
train_model8 <- rpart(income~ . , data = new.train8, method = "class", control= rpart.control(cp = 0, minsplit = 10))
# train set
new.train8$pred <- predict(train_model8, new.train8, type = "class")
#table
table(new.train8$income , new.train8$pred)
mean(new.train8$income == new.train8$pred) # accuracy : 89.7
get_precision(new.train8$pred, new.train8$income) # precision : 83.0%
get_recall(new.train8$pred, new.train8$income)    # recall : 74.0%
new.test2 <- test
new.test$pred <- predict(train_model8 , new.test, type = "class")
mean(new.test$income == new.test$pred) # accuracy : 85.15 / 83.7
get_precision(new.test$pred, new.test$income) # precision : 83.0% / 66.5
get_recall(new.test$pred, new.test$income)    # recall :  74.0% / 69.7
new.train9 <- train
train_model9 <- rpart(income~ . , data = new.train9, method = "class", control= rpart.control(cp = 0, maxdepth = 4))
# train set
new.train9$pred <- predict(train_model9, new.train9, type = "class")
#table
table(new.train9$income , new.train9$pred)
mean(new.train9$income == new.train9$pred) # accuracy : 83.2
get_precision(new.train9$pred, new.train9$income) # precision : 66.2
get_recall(new.train9$pred, new.train9$income)    # recall : 66.5
rpart.plot(train_model9)
new.test2 <- test
new.test <- test
new.test$pred <- predict(train_model9 , new.test, type = "class")
mean(new.test$income == new.test$pred) # accuracy : 85.15
get_precision(new.test$pred, new.test$income) # precision : 76.08%
get_recall(new.test$pred, new.test$income)    # recall : 58.75%
set.seed(2019)
n.income <- nrow(test)
rgroup <- runif(n.income)
# test1, test2
test.df1 <- subset(test, rgroup <= 0.6)
test.df2  <- subset(test, rgroup >  0.6)
# test1
new.test.df1 <- test.df1
new.test.df1$pred <- predict(train_model9 , new.test.df1, type = "class")
mean(new.test.df1$income == new.test.df1$pred) # accuracy : 83.2 / 83.7 / 84.0
get_precision(new.test.df1$pred, new.test.df1$income) # precision : 66.2 / 66.5 / 67.1
get_recall(new.test.df1$pred, new.test.df1$income)    # recall : 66.5% / 69.7 / 69.4
# test2
# test1
new.test.df2 <- test.df2
new.test.df2$pred <- predict(train_model9 , new.test.df2, type = "class")
mean(new.test.df2$income == new.test.df2$pred) # accuracy : 83.2 / 83.7 / 84.0 / 83.3
get_precision(new.test.df2$pred, new.test.df2$income) # precision : 66.2 / 66.5 / 67.1 /65.6
get_recall(new.test.df2$pred, new.test.df2$income)    # recall : 66.5% / 69.7 / 69.4 / 70.2
print(calcAUC(predict(train_model9,newdata=new.test ),new.test$income))
print(calAUC(predict(train_model9,newdata=new.test ),new.test$income))
calAUC(predict(train_model9,newdata=new.test ),new.test$income)
calAUC
calAUC(new.test$pred,new.test$income)
calAUC(predict(train_model9 , new.test, type = "class"), new.test$income)
calAUC(new.test$pred , new.test$income)
calAUC(new.test$pred , new.test$income=="rich")
wbcd_test_pred_prob
new.test$pred
new.test$pred <- predict(train_model9 , new.test, type = "class")
new.test$pred
library(caret)
confusionMatrix(predict(train_model9),new.test$income)
confusionMatrix(predict(train_model9),new.train$income)
confusionMatrix(predict(train_model9),new.train9$income)
confusionMatrix(predict(train_model9),new.train9$income)
par(cex = 0.6)
rpart.plot(train_model9)
new.train9 <- train
train_model9 <- rpart(income~ . , data = new.train9, method = "class", control= rpart.control(cp = 0, maxdepth = 4))
# train set
new.train9$pred <- predict(train_model9, new.train9, type = "class")
#table
table(new.train9$income , new.train9$pred)
mean(new.train9$income == new.train9$pred)        # accuracy : 0.84
get_precision(new.train9$pred, new.train9$income) # precision : 0.772
get_recall(new.train9$pred, new.train9$income)    # recall : 0.509
par(cex = 0.6)
rpart.plot(train_model9)
new.train9 <- train
train_model9 <- rpart(income~ . , data = new.train9, method = "class", control= rpart.control(cp = 0, maxdepth = 5))
# train set
new.train9$pred <- predict(train_model9, new.train9, type = "class")
#table
table(new.train9$income , new.train9$pred)
mean(new.train9$income == new.train9$pred)        # accuracy : 0.84
get_precision(new.train9$pred, new.train9$income) # precision : 0.772
get_recall(new.train9$pred, new.train9$income)    # recall : 0.509
par(cex = 0.6)
rpart.plot(train_model9)
train_model9 <- rpart(income~ . , data = new.train9, method = "class", control= rpart.control(cp = 0, maxdepth = 3))
# train set
new.train9$pred <- predict(train_model9, new.train9, type = "class")
#table
table(new.train9$income , new.train9$pred)
mean(new.train9$income == new.train9$pred)        # accuracy : 0.84
get_precision(new.train9$pred, new.train9$income) # precision : 0.772
get_recall(new.train9$pred, new.train9$income)    # recall : 0.509
par(cex = 0.6)
rpart.plot(train_model9)
train_model9 <- rpart(income~ . , data = new.train9, method = "class", control= rpart.control(cp = 0, maxdepth = 6))
# train set
new.train9$pred <- predict(train_model9, new.train9, type = "class")
#table
table(new.train9$income , new.train9$pred)
mean(new.train9$income == new.train9$pred)        # accuracy : 0.84
get_precision(new.train9$pred, new.train9$income) # precision : 0.772
get_recall(new.train9$pred, new.train9$income)    # recall : 0.509
par(cex = 0.6)
rpart.plot(train_model9)
# train set
new.train9$pred <- predict(train_model9, new.train9, type = "class")
#table
table(new.train9$income , new.train9$pred)
mean(new.train9$income == new.train9$pred)        # accuracy : 0.84
get_precision(new.train9$pred, new.train9$income) # precision : 0.772
get_recall(new.train9$pred, new.train9$income)    # recall : 0.509
par(cex = 0.6)
rpart.plot(train_model9)
train_model9 <- rpart(income~ . , data = new.train9, method = "class", control= rpart.control(cp = 0, maxdepth = 4))
# train set
new.train9$pred <- predict(train_model9, new.train9, type = "class")
#table
table(new.train9$income , new.train9$pred)
mean(new.train9$income == new.train9$pred)        # accuracy : 0.84
get_precision(new.train9$pred, new.train9$income) # precision : 0.772
get_recall(new.train9$pred, new.train9$income)    # recall : 0.509
par(cex = 0.6)
rpart.plot(train_model9)
new.train9 <- train
train_model9 <- rpart(income~ . , data = new.train9, method = "class", control= rpart.control(cp = 0, maxdepth = 4))
# train set
new.train9$pred <- predict(train_model9, new.train9, type = "class")
#table
table(new.train9$income , new.train9$pred)
mean(new.train9$income == new.train9$pred)        # accuracy : 0.84
get_precision(new.train9$pred, new.train9$income) # precision : 0.772
get_recall(new.train9$pred, new.train9$income)    # recall : 0.509
par(cex = 0.6)
rpart.plot(train_model9)
par(cex = 0.4)
rpart.plot(train_model9)
par(cex = 1.5)
rpart.plot(train_model9)
par(cex = 3)
rpart.plot(train_model9)
par(cex = 1.5)
rpart.plot(train_model9)
